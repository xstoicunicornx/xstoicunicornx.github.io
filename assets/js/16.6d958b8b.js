(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{341:function(e,t,n){"use strict";n.r(t);var a=n(13),r=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("br"),e._v(" "),t("p",[e._v("Payjoin v1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. This requires setting up either a HTTPS proxy or a Tor proxy when testing payjoins across different implementations.")]),e._v(" "),t("h2",{attrs:{id:"setting-up-a-https-payjoin-server-with-nginx"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#setting-up-a-https-payjoin-server-with-nginx"}},[e._v("#")]),e._v(" Setting up a HTTPS payjoin server with nginx")]),e._v(" "),t("p",[e._v("This guide requires a dedicated server that you can "),t("code",[e._v("ssh")]),e._v(" into, with the ability to "),t("code",[e._v("sudo")]),e._v(", and a domain name pointing to that server.")]),e._v(" "),t("h3",{attrs:{id:"configure-a-nginx-proxy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configure-a-nginx-proxy"}},[e._v("#")]),e._v(" Configure a nginx proxy")]),e._v(" "),t("p",[e._v("First, ensure nginx is installed on the server or "),t("a",{attrs:{href:"https://nginx.org/en/docs/install.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("install nginx"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("Then, we'll edit "),t("code",[e._v("/etc/nginx/nginx.conf")]),e._v(" to proxy traffic to the payjoin server (more on that later) by adding the following block:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# nginx.conf\n    server {\n        server_name pj.example.com; # Replace this with your domain name\n\n        location / {\n            proxy_pass http://localhost:3000; # This is the port on which we'll run the payjoin server\n\n            proxy_set_header        Host $host;\n            proxy_set_header        X-Real-IP $remote_addr;\n            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header        X-Forwarded-Proto $scheme;\n        }\n    }\n")])])]),t("p",[e._v("Note that the above configuration uses the "),t("code",[e._v("pj")]),e._v(" subdomain to avoid conflicts with anything that may already be running on the root domain.")]),e._v(" "),t("h3",{attrs:{id:"get-a-certificate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get-a-certificate"}},[e._v("#")]),e._v(" Get a certificate")]),e._v(" "),t("p",[e._v("Next, we'll need to obtain a valid TLS certificate from a Certificate Authority. There are many ways to do this, but one free and relatively easy option is to use "),t("a",{attrs:{href:"https://certbot.eff.org/instructions",target:"_blank",rel:"noopener noreferrer"}},[e._v("certbot"),t("OutboundLink")],1),e._v(", an open-source tool by "),t("a",{attrs:{href:"https://letsencrypt.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("letsencrypt.org"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("Once certbot is installed, we can obtain a certificate and automatically update the nginx configuration:")]),e._v(" "),t("p",[t("code",[e._v("sudo certbot -d <server_name from the nginx.conf above> --nginx")])]),e._v(" "),t("p",[t("code",[e._v("/etc/nginx/nginx.conf")]),e._v(" should now look something like this:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# nginx.conf\n    server {\n        server_name pj.example.com;\n\n        location / {\n            proxy_pass http://localhost:3000;\n\n            proxy_set_header        Host $host;\n            proxy_set_header        X-Real-IP $remote_addr;\n            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header        X-Forwarded-Proto $scheme;\n        }\n\n        listen 443 ssl; # managed by Certbot\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; # managed by Certbot\n        include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n    }\n")])])]),t("p",[e._v("Verify the installation with "),t("code",[e._v("curl")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('[ec2-user@ip-172-31-94-70 ~]$ curl -v https://<server_name>\n* Host pj.example.com:443 was resolved.\n* IPv6: (none)\n* IPv4: 54.156.128.153\n*   Trying 54.156.128.153:443...\n* Connected to pj.example.com (54.156.128.153) port 443\n* ALPN: curl offers h2,http/1.1\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\n*  CAfile: /etc/pki/tls/certs/ca-bundle.crt\n*  CApath: none\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\n* TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8):\n* TLSv1.3 (IN), TLS handshake, Certificate (11):\n* TLSv1.3 (IN), TLS handshake, CERT verify (15):\n* TLSv1.3 (IN), TLS handshake, Finished (20):\n* TLSv1.3 (OUT), TLS change cipher, Change cipher spec (1):\n* TLSv1.3 (OUT), TLS handshake, Finished (20):\n* SSL connection using TLSv1.3 / TLS_AES_256_GCM_SHA384 / X25519 / id-ecPublicKey\n* ALPN: server accepted http/1.1\n* Server certificate:\n*  subject: CN=spacebear.dev\n*  start date: Apr 18 01:37:16 2024 GMT\n*  expire date: Jul 17 01:37:15 2024 GMT\n*  subjectAltName: host "pj.example.com" matched cert\'s "pj.example.com"\n*  issuer: C=US; O=Let\'s Encrypt; CN=R3\n*  SSL certificate verify ok.\n\n...\n\n<html>\n<head><title>502 Bad Gateway</title></head>\n<body>\n<center><h1>502 Bad Gateway</h1></center>\n<hr><center>nginx/1.25.0</center>\n</body>\n</html>\n')])])]),t("p",[e._v('If everything worked, we should see "SSL certificate verify ok."! We now have a legit HTTPS server proxying traffic to port 3000, but as indicated by the 502 error there is nothing running there. The next step is to setup a payjoin receiver to run on that port.')]),e._v(" "),t("h4",{attrs:{id:"optional-make-a-cronjob-to-auto-renew-the-certificate-on-a-schedule"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#optional-make-a-cronjob-to-auto-renew-the-certificate-on-a-schedule"}},[e._v("#")]),e._v(" (Optional) Make a cronjob to auto-renew the certificate on a schedule")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("echo \"0 0,12 * * * root /opt/certbot/bin/python -c 'import random; import time; time.sleep(random.random() * 3600)' && sudo certbot renew -q\" | sudo tee -a /etc/crontab > /dev/null\n")])])]),t("h3",{attrs:{id:"set-up-bitcoin-core-on-signet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set-up-bitcoin-core-on-signet"}},[e._v("#")]),e._v(" Set up Bitcoin Core on signet")]),e._v(" "),t("p",[e._v("Because we're testing between wallets on different machines, regtest won't work (at least not trivially). We need a \"real\" Bitcoin network like signet. "),t("a",{attrs:{href:"https://bitcoincore.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Install Bitcoin Core"),t("OutboundLink")],1),e._v(" and edit "),t("code",[e._v("~/.bitcoin/bitcoin.conf")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# bitcoin.conf\nchain=signet\nserver=1\nrpcuser=payjoin\nrpcpassword=payjoin\n")])])]),t("p",[t("code",[e._v("bitcoind")]),e._v(" will take a few minutes to sync. In the meantime, let's create "),t("code",[e._v("sender")]),e._v(" and "),t("code",[e._v("receiver")]),e._v(" wallets and fund them. Use a signet faucet like https://signetfaucet.com/ if you don't have any signet coins on hand.")]),e._v(" "),t("h3",{attrs:{id:"install-and-run-payjoin-cli-receiver"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#install-and-run-payjoin-cli-receiver"}},[e._v("#")]),e._v(" Install and run payjoin-cli receiver")]),e._v(" "),t("p",[e._v("Finally, we'll install (or build from source) "),t("a",{attrs:{href:"https://github.com/payjoin/rust-payjoin/tree/master/payjoin-cli#install-payjoin-cli",target:"_blank",rel:"noopener noreferrer"}},[e._v("payjoin-cli"),t("OutboundLink")],1),e._v(" and make a "),t("code",[e._v("config.toml")]),e._v(" in the directory we plan on running payjoin-cli from:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('# config.toml\nbitcoind_rpcuser = "payjoin"\nbitcoind_rpcpass = "payjoin"\nbitcoind_rpchost = "http://localhost:38332/wallet/receiver"\n')])])]),t("p",[e._v("We can now run the receiver:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ payjoin-cli receive 10000\nListening at 0.0.0.0:3000. Configured to accept payjoin at BIP 21 Payjoin Uri:\nbitcoin:tb1q9e5qgztf6w4zz2m3ts3w2zp3psdqpgmtdkf7y0?amount=0.0001&pj=https://localhost:3000/&pjos=0\n")])])]),t("h3",{attrs:{id:"send-payjoin-"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#send-payjoin-"}},[e._v("#")]),e._v(" Send payjoin!")]),e._v(" "),t("p",[e._v("Send a payjoin to the BIP21 Uri generated above, taking care to replace "),t("code",[e._v("localhost:3000")]),e._v(" in the "),t("code",[e._v("pj=")]),e._v(" parameter with the domain name where your server is running. This should work from any wallet that implements payjoin support, from any machine.")]),e._v(" "),t("p",[e._v("E.g. sending from joinmarket:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('(jmvenv) $ sendpayment.py -m 0 wallet.jmdat "bitcoin:tb1q9e5qgztf6w4zz2m3ts3w2zp3psdqpgmtdkf7y0?amount=0.0001&pj=https://pj.example.com/&pjos=0"\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);