(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{393:function(t,e,a){"use strict";a.r(e);var s=a(25),n=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[e("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki",target:"_blank",rel:"noopener noreferrer"}},[t._v("Payjoin V1"),e("OutboundLink")],1),t._v(" coordinates transactions between two parties who communicate over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. This requires setting up either an HTTPS proxy or a Tor proxy when testing payjoins across different implementations.")]),t._v(" "),e("h2",{attrs:{id:"setting-up-a-https-payjoin-server-with-nginx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setting-up-a-https-payjoin-server-with-nginx"}},[t._v("#")]),t._v(" Setting up a HTTPS payjoin server with nginx")]),t._v(" "),e("p",[t._v("This guide requires a dedicated server that you can "),e("code",[t._v("ssh")]),t._v(" into, with the ability to "),e("code",[t._v("sudo")]),t._v(", and a domain name pointing to that server.")]),t._v(" "),e("h3",{attrs:{id:"configure-a-nginx-proxy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#configure-a-nginx-proxy"}},[t._v("#")]),t._v(" Configure a nginx proxy")]),t._v(" "),e("p",[t._v("First, ensure nginx is installed on the server or "),e("a",{attrs:{href:"https://nginx.org/en/docs/install.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("install nginx"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("Then, we'll edit "),e("code",[t._v("/etc/nginx/nginx.conf")]),t._v(" to proxy traffic to the payjoin server (more on that later) by adding the following block:")]),t._v(" "),e("div",{staticClass:"language-conf extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# nginx.conf\n    server {\n        server_name pj.example.com; # Replace this with your domain name\n\n        location / {\n            proxy_pass http://localhost:3000; # This is the port on which we'll run the payjoin server\n\n            proxy_set_header        Host $host;\n            proxy_set_header        X-Real-IP $remote_addr;\n            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header        X-Forwarded-Proto $scheme;\n        }\n    }\n")])])]),e("p",[t._v("Note that the above configuration uses the "),e("code",[t._v("pj")]),t._v(" subdomain to avoid conflicts with anything that may already be running on the root domain.")]),t._v(" "),e("h3",{attrs:{id:"get-a-certificate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-a-certificate"}},[t._v("#")]),t._v(" Get a certificate")]),t._v(" "),e("p",[t._v("Next, we'll need to obtain a valid TLS certificate from a Certificate Authority. There are many ways to do this, but one free and relatively easy option is to use "),e("a",{attrs:{href:"https://certbot.eff.org/instructions",target:"_blank",rel:"noopener noreferrer"}},[t._v("certbot"),e("OutboundLink")],1),t._v(", an open-source tool by "),e("a",{attrs:{href:"https://letsencrypt.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("letsencrypt.org"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("Once certbot is installed, we can obtain a certificate and automatically update the nginx configuration:")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" certbot "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("server_name from the nginx.conf above"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--nginx")]),t._v("\n")])])]),e("p",[e("code",[t._v("/etc/nginx/nginx.conf")]),t._v(" should now look something like this:")]),t._v(" "),e("div",{staticClass:"language-conf extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# nginx.conf\n    server {\n        server_name pj.example.com;\n\n        location / {\n            proxy_pass http://localhost:3000;\n\n            proxy_set_header        Host $host;\n            proxy_set_header        X-Real-IP $remote_addr;\n            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header        X-Forwarded-Proto $scheme;\n        }\n\n        listen 443 ssl; # managed by Certbot\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; # managed by Certbot\n        include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n    }\n")])])]),e("p",[t._v("Verify the installation with "),e("code",[t._v("curl")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-v")]),t._v(" https://"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("server_name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n* Host pj.example.com:443 was resolved.\n* IPv6: "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("none"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n* IPv4: "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("54.156")]),t._v(".128.153\n*   Trying "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("54.156")]),t._v(".128.153:443"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n* Connected to pj.example.com "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("54.156")]),t._v(".128.153"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" port "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("443")]),t._v("\n* ALPN: "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" offers h2,http/1.1\n* TLSv1.3 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OUT"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", TLS handshake, Client hello "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n*  CAfile: /etc/pki/tls/certs/ca-bundle.crt\n*  CApath: none\n* TLSv1.3 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("IN"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", TLS handshake, Server hello "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n* TLSv1.3 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("IN"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", TLS handshake, Encrypted Extensions "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n* TLSv1.3 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("IN"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", TLS handshake, Certificate "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n* TLSv1.3 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("IN"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", TLS handshake, CERT verify "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n* TLSv1.3 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("IN"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", TLS handshake, Finished "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n* TLSv1.3 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OUT"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", TLS change cipher, Change cipher spec "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n* TLSv1.3 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OUT"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", TLS handshake, Finished "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n* SSL connection using TLSv1.3 / TLS_AES_256_GCM_SHA384 / X25519 / id-ecPublicKey\n* ALPN: server accepted http/1.1\n* Server certificate:\n*  subject: "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("CN")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("spacebear.dev\n*  start date: Apr "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v(" 01:37:16 "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2024")]),t._v(" GMT\n*  expire date: Jul "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),t._v(" 01:37:15 "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2024")]),t._v(" GMT\n*  subjectAltName: "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("host")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pj.example.com"')]),t._v(" matched cert"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'s \"pj.example.com\"\n*  issuer: C=US; O=Let'")]),t._v("s Encrypt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("CN")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("R3\n*  SSL certificate verify ok.\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("html"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("head"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("title"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),t._v(" Bad Gateway"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("/title"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("/head"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("body"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("center"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h"),e("span",{pre:!0,attrs:{class:"token operator"}},[e("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("1")]),t._v(">")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),t._v(" Bad Gateway"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("/h"),e("span",{pre:!0,attrs:{class:"token operator"}},[e("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("1")]),t._v(">")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("/center"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("hr"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("center"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("nginx/1.25."),e("span",{pre:!0,attrs:{class:"token operator"}},[e("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("0")]),t._v("<")]),t._v("/center"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("/body"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("/html"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("p",[t._v('If everything worked, we should see "SSL certificate verify ok."! We now have a legit HTTPS server proxying traffic to port 3000, but as indicated by the 502 error there is nothing running there. The next step is to setup a payjoin receiver to run on that port.')]),t._v(" "),e("h4",{attrs:{id:"optional-make-a-cronjob-to-auto-renew-the-certificate-on-a-schedule"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#optional-make-a-cronjob-to-auto-renew-the-certificate-on-a-schedule"}},[t._v("#")]),t._v(" (Optional) Make a cronjob to auto-renew the certificate on a schedule")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("echo \"0 0,12 * * * root /opt/certbot/bin/python -c 'import random; import time; time.sleep(random.random() * 3600)' && sudo certbot renew -q\" | sudo tee -a /etc/crontab > /dev/null\n")])])]),e("h3",{attrs:{id:"set-up-bitcoin-core-on-signet"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#set-up-bitcoin-core-on-signet"}},[t._v("#")]),t._v(" Set up Bitcoin Core on signet")]),t._v(" "),e("p",[t._v("Because we're testing between wallets on different machines, regtest won't work (at least not trivially). We need a \"real\" Bitcoin network like signet. "),e("a",{attrs:{href:"https://bitcoincore.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Install Bitcoin Core"),e("OutboundLink")],1),t._v(" and edit "),e("code",[t._v("~/.bitcoin/bitcoin.conf")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-conf extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# bitcoin.conf\nchain=signet\nserver=1\nrpcuser=payjoin\nrpcpassword=payjoin\n")])])]),e("p",[e("code",[t._v("bitcoind")]),t._v(" will take a few minutes to sync. In the meantime, let's create "),e("code",[t._v("sender")]),t._v(" and "),e("code",[t._v("receiver")]),t._v(" wallets and fund them. Use a signet faucet like https://signetfaucet.com/ if you don't have any signet coins on hand.")]),t._v(" "),e("h3",{attrs:{id:"install-and-run-payjoin-cli-receiver"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#install-and-run-payjoin-cli-receiver"}},[t._v("#")]),t._v(" Install and run payjoin-cli receiver")]),t._v(" "),e("p",[t._v("Finally, we'll install (or build from source) "),e("a",{attrs:{href:"https://github.com/payjoin/rust-payjoin/tree/master/payjoin-cli#install-payjoin-cli",target:"_blank",rel:"noopener noreferrer"}},[t._v("payjoin-cli"),e("OutboundLink")],1),t._v(" and make a "),e("code",[t._v("config.toml")]),t._v(" in the directory we plan on running payjoin-cli from:")]),t._v(" "),e("div",{staticClass:"language-toml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-toml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# config.toml")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key property"}},[t._v("bitcoind_rpcuser")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"payjoin"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key property"}},[t._v("bitcoind_rpcpass")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"payjoin"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key property"}},[t._v("bitcoind_rpchost")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://localhost:38332/wallet/receiver"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key property"}},[t._v("pj_endpoint")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://pj.example.com"')]),t._v("\n")])])]),e("p",[t._v("This guide used "),e("a",{attrs:{href:"https://crates.io/crates/payjoin-cli/0.0.5-alpha",target:"_blank",rel:"noopener noreferrer"}},[t._v("payjoin-cli v0.0.5-alpha"),e("OutboundLink")],1),t._v(". Configuration may change with newer versions.")]),t._v(" "),e("p",[t._v("We can now run the receiver:")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ payjoin-cli receive "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),t._v("\nListening at "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0:3000. Configured to accept payjoin at BIP "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v(" Payjoin Uri:\nbitcoin:tb1q9e5qgztf6w4zz2m3ts3w2zp3psdqpgmtdkf7y0?amount"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0001")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("pj")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("https://pj.example.com"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("pjos")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),e("h3",{attrs:{id:"send-payjoin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#send-payjoin"}},[t._v("#")]),t._v(" Send payjoin")]),t._v(" "),e("p",[t._v("Send a payjoin to the BIP21 Uri generated above. This should work from any wallet that implements payjoin support, from any machine.")]),t._v(" "),e("p",[t._v("E.g. sending from joinmarket:")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("jmvenv"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" $ sendpayment.py "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" wallet.jmdat "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bitcoin:tb1q9e5qgztf6w4zz2m3ts3w2zp3psdqpgmtdkf7y0?amount=0.0001&pj=https://pj.example.com&pjos=0"')]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);