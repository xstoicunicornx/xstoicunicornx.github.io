(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{390:function(e,t,a){"use strict";a.r(t);var i=a(25),n=Object(i.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("The following is a conclusive address of concerns around UTXO probing attacks on\nPayjoin, clarification of why current mitigations are effective, and definitive\nargument for Payjoin adoption. Payjoin, the fundamental interactive\ntransaction batching protocol, saves fees by reducing the effective size of\ntransfers and improves privacy by disrupting common blockchain surveillance\nheuristics. While probing attacks exist in theory, they're costly to pull off,\nmitigated in practice, and are not a meaningful barrier to adoption.")]),e._v(" "),t("h2",{attrs:{id:"the-probing-attack-explained"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#the-probing-attack-explained"}},[e._v("#")]),e._v(" The Probing Attack Explained")]),e._v(" "),t("p",[e._v("Probing entails an attacker initiating payjoins they plan to abort in order to learn\nabout the coins in a receiver's wallet. Because Payjoin receivers respond to\npotential senders with payjoin proposals including their coins, senders\nlearn about those coins. If there were no cost to obtain a payjoin proposal, this\nattack would earn attackers new information about receivers they could not otherwise obtain.")]),e._v(" "),t("p",[e._v("The earliest payjoin specifications explicitly address these attacks. See these sections "),t("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki#contributed-input-choice",target:"_blank",rel:"noopener noreferrer"}},[e._v("in BIP\n79"),t("OutboundLink")],1),e._v("\nand "),t("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#on-the-receiver-side-utxo-probing-attack",target:"_blank",rel:"noopener noreferrer"}},[e._v("in BIP 78"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"current-probing-mitigations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#current-probing-mitigations"}},[e._v("#")]),e._v(" Current Probing Mitigations")]),e._v(" "),t("h3",{attrs:{id:"minimum-value-policy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minimum-value-policy"}},[e._v("#")]),e._v(" Minimum-value Policy")]),e._v(" "),t("p",[e._v("Minimum-value policies impose a floor price above which receivers will respond\nto senders with payjoin proposals including receiver coins.")]),e._v(" "),t("h4",{attrs:{id:"minimum-fee-rate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minimum-fee-rate"}},[e._v("#")]),e._v(" Minimum Fee Rate")]),e._v(" "),t("p",[e._v("Receivers may choose only to respond to senders providing a fallback transaction of a\nminimum fee rate. If a sender aborts, the receiver may broadcast, spending the\nsender's fallback fee.")]),e._v(" "),t("h4",{attrs:{id:"minimum-transfer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minimum-transfer"}},[e._v("#")]),e._v(" Minimum Transfer")]),e._v(" "),t("p",[e._v("Receivers may choose only to respond to senders providing a fallback transaction\ntransferring the receiver a minimum amount. If a sender aborts, the receiver may\nbroadcast, costing the sender their transfer amount plus fees.")]),e._v(" "),t("h3",{attrs:{id:"fallback-broadcast"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fallback-broadcast"}},[e._v("#")]),e._v(" Fallback Broadcast")]),e._v(" "),t("p",[e._v("Payment processors operating as Payjoin receivers should be the most concerned about\nprobing attacks since they respond to requests to make payjoins\nautomatically. Manual receivers generate requests for each would-be probing\nattempt, which makes repeated attack requests a non-concern, since the receiver\nwill be necessarily aware that multiple requests are being made and aborted.")]),e._v(" "),t("p",[e._v("By specification, automated payment processors operating as Payjoin receivers must broadcast the\nsender's valid fallback transaction after an expiration timeout if\nreceivers don't see their Payjoin broadcast. This enforces a\nminimum relay fee rate policy by default.")]),e._v(" "),t("p",[e._v("The mechanism may also be implemented by manual peer-to-peer receivers\nas an additional precaution. A broadcast may be triggered manually or\nautomatically after an appropriate amount of time passes, for example, after an Async\nPayjoin session expires.")]),e._v(" "),t("h3",{attrs:{id:"input-replay"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#input-replay"}},[e._v("#")]),e._v(" Input Replay")]),e._v(" "),t("p",[e._v("Automated payment processors should respond to senders using fallback transactions containing\nthe same sender inputs with the same receiver input of their own. This secures\nthe floor cost imposed by the above mitigations.")]),e._v(" "),t("h3",{attrs:{id:"session-policy-binding"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session-policy-binding"}},[e._v("#")]),e._v(" Session Policy Binding")]),e._v(" "),t("p",[e._v("In Async Payjoin, receive sessions are bound to the bitcoin URI used to request them.\nReceivers may bind specific policies to specific URIs given to\nindividual senders depending on the perceived level of trust.")]),e._v(" "),t("h2",{attrs:{id:"refuting-core-concerns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#refuting-core-concerns"}},[e._v("#")]),e._v(" Refuting Core Concerns")]),e._v(" "),t("ul",[t("li",[t("p",[t("strong",[e._v("Claim")]),e._v(": Probing is costless"),t("br"),e._v(" "),t("strong",[e._v("Reality")]),e._v(": Attackers must pay fees or risk paying the receiver the minimum\nvalue when their fallback is broadcast.")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Claim")]),e._v(": Current mitigations are ineffective"),t("br"),e._v(" "),t("strong",[e._v("Reality")]),e._v(": Correct implementations strictly limit info leaks and raise\nattacker costs significantly. No reports of probing abuse are known.")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Claim")]),e._v(": Attackers can always spend enough resources to probe anyway"),t("br"),e._v(" "),t("strong",[e._v("Reality")]),e._v(": Active attackers can, in theory, target privacy anyway (dust,\nSybil attacks), but Payjoin shifts attacks from passive (cheap, scalable), to\nactive (expensive, detectable).")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Claim")]),e._v(": Avoid Payjoin entirely for safety"),t("br"),e._v(" "),t("strong",[e._v("Reality")]),e._v(": Without Payjoin, normal consolidation leaks more information\npassively than probing would actively. Payjoin significantly reduces overall\nleakage, even for those who haven't yet adopted the protocol. Imagine a world\nwithout payjoin: someone who sends you bitcoin likely learns about coins of\nyours anyway once they're consolidated, because common input heuristic would\nhold without Payjoin adoption.")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Claim")]),e._v(": Payjoin doesn't let you select coins, which would prevent leaks"),t("br"),e._v(" "),t("strong",[e._v("Reality")]),e._v(": Payjoin is a peer-to-peer batching mechanism. Payjoin peers may\nselect to use any coins based on local labels or any other preference.\nHowever, even complete label information alone is often insufficient to enable\nusers to preserve the privacy of their activity. Coin selection is an\nunrelated concern.")])])]),e._v(" "),t("h2",{attrs:{id:"how-payjoin-plugs-the-leaks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#how-payjoin-plugs-the-leaks"}},[e._v("#")]),e._v(" How Payjoin Plugs the Leaks")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Breaks common input heuristic")]),e._v(": Breaks Satoshi's assumption that all inputs\ncome from the sender.")]),e._v(" "),t("li",[t("strong",[e._v("Hurts change identification")]),e._v(": Makes it harder to determine which output is\npayment and which is change.")]),e._v(" "),t("li",[t("strong",[e._v("Eliminates standalone consolidations")]),e._v(": Receivers consolidate in a batch\nwith their payments, making it cheaper to break the heuristics than leak info.")]),e._v(" "),t("li",[t("strong",[e._v("Improves global privacy")]),e._v(": Payjoins can look like non-payjoins,\ncompounding difficulty for surveillance adversaries.")])]),e._v(" "),t("h2",{attrs:{id:"edge-cases-and-real-world-context"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#edge-cases-and-real-world-context"}},[e._v("#")]),e._v(" Edge Cases and Real-World Context")]),e._v(" "),t("p",[e._v("Attacks exist in theory, particularly if implementation guidelines aren't\nfollowed. Such cases are implementation issues â€” not Payjoin protocol flaws. The\nPayjoin Dev Kit guides implementors to make misuse difficult.")]),e._v(" "),t("p",[e._v("While subtle attacks like dusting do occur on Bitcoin, probing Payjoin at scale\nis costly and practically limited.")]),e._v(" "),t("h2",{attrs:{id:"how-to-secure-your-payjoin-implementation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#how-to-secure-your-payjoin-implementation"}},[e._v("#")]),e._v(" How to Secure your Payjoin Implementation")]),e._v(" "),t("ul",[t("li",[e._v("Use Payjoin Dev Kit to follow best practices by default.")]),e._v(" "),t("li",[e._v("For custom implementations, follow the BIP guidelines and mitigation checklist in this article.")]),e._v(" "),t("li",[e._v("Ask the Payjoin Dev Kit team for help to ensure your implementation takes\nappropriate precautions like request persistence and fallback broadcast.")])]),e._v(" "),t("h2",{attrs:{id:"why-payjoin-wins"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#why-payjoin-wins"}},[e._v("#")]),e._v(" Why Payjoin Wins")]),e._v(" "),t("p",[e._v("Payjoin's savings and privacy benefits vastly outweigh theoretical probing\nrisks. Adopting Payjoin offers good will to the entire bitcoin network, since\nhigher rate of payjoin usage increases privacy for even non-payjoin\ntransactions. Payjoin Dev Kit abstracts the best practices to address known concerns\nabout probing to make Payjoin receivers strictly better off.")])])}),[],!1,null,null,null);t.default=n.exports}}]);